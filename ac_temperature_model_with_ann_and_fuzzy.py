# -*- coding: utf-8 -*-
"""AC temperature.model with ANN and FUZZY.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y1Gz7Yo7-zVnSuUVR0FR7Si9mtr-HtsI
"""

!pip install -U scikit-fuzzy

import numpy as np
import skfuzzy as fuzz
import tensorflow as tf
from skfuzzy import control as ctrl
import matplotlib.pyplot as plt

# Generating Example Data randomly selected temperature
temperature = np.random.randint(0, 101, 100)
desired_temperature = np.random.randint(0, 101, 100)

temperature.view()

desired_temperature.view()

# Defining Fuzzy Variables
temperature_input = ctrl.Antecedent(np.arange(0, 101, 1), 'temperature (°C)')
desired_temp_input = ctrl.Antecedent(np.arange(0, 101, 1), 'desired_temperature (°C)')
fan_speed = ctrl.Consequent(np.arange(0, 101, 1), 'fan_speed')

desired_temp_input.view()

# Define membership functions

# Temperature input
temperature_input['low'] = fuzz.trimf(temperature_input.universe, [0, 5, 20])
temperature_input['medium'] = fuzz.trimf(temperature_input.universe, [10, 25, 40])
temperature_input['high'] = fuzz.trimf(temperature_input.universe, [30, 45, 100])

# Desired temperature input
desired_temp_input['low'] = fuzz.trimf(desired_temp_input.universe, [0, 5, 20])
desired_temp_input['medium'] = fuzz.trimf(desired_temp_input.universe, [10, 25, 40])
desired_temp_input['high'] = fuzz.trimf(desired_temp_input.universe, [30, 45, 100])

# Fan speed output
fan_speed = ctrl.Consequent(np.arange(0, 101, 1), 'fan_speed')
fan_speed['low'] = fuzz.trimf(fan_speed.universe, [0, 0, 50])
fan_speed['medium'] = fuzz.trimf(fan_speed.universe, [0, 50, 100])
fan_speed['high'] = fuzz.trimf(fan_speed.universe, [50, 100, 100])


# Defining Fuzzy Rules
rule1 = ctrl.Rule(temperature_input['low'] | desired_temp_input['low'], fan_speed['high'])
rule2 = ctrl.Rule(temperature_input['medium'] & desired_temp_input['medium'], fan_speed['medium'])
rule3 = ctrl.Rule(temperature_input['high'] | desired_temp_input['high'], fan_speed['low'])

# Creating Fuzzy Control System
fan_speed_ctrl = ctrl.ControlSystem([rule1, rule2, rule3])
fan_speed = ctrl.ControlSystemSimulation(fan_speed_ctrl)

#View membership functions
fan_speed_ctrl.view()

# Generate some example data for prediction
test_data = np.column_stack((temperature, desired_temperature))

# Predicting using the Fuzzy Model
predicted_fan_speed = []
for data in test_data:
  fan_speed.input['temperature (°C)'] = data[0]
  fan_speed.input['desired_temperature (°C)'] = data[1]
  # Simulate the fuzzy system
  fan_speed.compute()
  # the actual output value
  predicted_fan_speed.append(fan_speed.output['fan_speed'])

print(predicted_fan_speed)

print(fan_speed.output)

# Generate data randomly selected temperature
temperature = np.random.randint(0, 101, 100)
desired_temperature = np.random.randint(0, 101, 100)

# Combine Fuzzy System Data for ANN
predicted_fuzzy_speed = []
for i in range(len(temperature)):
  # Simulate fuzzy system
  fan_speed.input['temperature (°C)'] = temperature[i]
  fan_speed.input['desired_temperature (°C)'] = desired_temperature[i]
  fan_speed.compute()

  # Access the fuzzy output
  predicted_fuzzy_speed.append(fan_speed.output['fan_speed'])

# Prepare data for ANN
combined_data = np.column_stack((temperature, desired_temperature, predicted_fuzzy_speed))

# Define and Train ANN Model
model = tf.keras.Sequential([
  tf.keras.layers.Dense(64, activation='relu', input_shape=(3,)),
  tf.keras.layers.Dense(32, activation='relu'),
  tf.keras.layers.Dense(1, activation='linear')
])

# Mean squared error loss
model.compile(optimizer='adam', loss='mse')

# Train the model
model.fit(combined_data, np.random.rand(100), epochs=100)

# Generate some example data for prediction
test_data = np.column_stack((temperature, desired_temperature, np.zeros(len(temperature))))

# Predict fan speed (fuzzy system + ANN)
predicted_fan_speed = []
for i in range(len(test_data)):
  # Simulate fuzzy system
  fan_speed.input['temperature (°C)'] = test_data[i][0]
  fan_speed.input['desired_temperature (°C)'] = test_data[i][1]
  fan_speed.compute()
  test_data[i][2] = fan_speed.output['fan_speed']

  # Predict using the ANN model
  predicted_fan_speed.append(model.predict(np.array([test_data[i]]))[0][0])

# Print the predicted fan speed
print(predicted_fan_speed)

# Print the predicted fan speed
print(predicted_fan_speed)

#View membership functions after ANN
fan_speed_ctrl.view()

# Plot predicted fan speed
plt.figure()
plt.plot(predicted_fan_speed, label='Predicted Fan Speed')
plt.xlabel('Sample')
plt.ylabel('Fan Speed')
plt.title('Predicted Fan Speed')
plt.legend()
plt.show()